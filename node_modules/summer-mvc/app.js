const express = require( "express" );
const app = express();




// Init global module's paths;
global.dbHandler = require( "./common/dbHandler.js" ).dbHandler;
global.connectionHandler = require( "./common/connection.js" ).connection;
global.fileHandler = require( "./common/fileHandler.js" ).fileHandler;
global.Promise = require( "bluebird" );
global.mysql = require( "mysql" );




// Init cookie, session
const cookieParser = require( "cookie-parser" );
app.use( cookieParser() );

const session = require( "express-session" );
app.use( session({
  secret : "aslknq;oiwne;ofuiba;osudbf;uoasdf",
  resave : false,
  saveUninitialized : true,
  cookie : {
    maxAge: 1000 * 60 * 60
  }
}) );





// Init body Parser
const bodyParser = require( "body-parser" );
app.use( bodyParser.urlencoded({ extended : true }) );




// Init summer-mvc structure
const initializer = require( "./common/initializer" );
initializer.initStructure();




// set View Engine : specific for ejs
const viewEngine = initializer.getViewEngine();

app.set( "view engine", viewEngine );
app.engine( "html", require(viewEngine).renderFile );
app.set( "views", "views" );




// set static Folders
const staticFolders = initializer.getStaticFolders();

for( var i=0; i<staticFolders.length; i++ ){
  app.use( express.static(staticFolders[i]) );
}




// set context Dispatcher
const contextDispatcher = require( initializer.getContextDispatcherPath() );
//const controllerDispatcher = ( initializer.getControllerDispatcherPath() === undefined ) ? undefined : require( initializer.getControllerDispatcherPath() );




// Start WAS
const port = initializer.getPort();

app.listen( port, () => {
  console.log( "Listen Port : " + port );
} );




const Promise = require( "bluebird" );

app.get( "/*", (req, res) => {

  console.log( req.headers["accept-language"] );

  contextDispatcher.dispatching( req, res )
  .then( function( mav ){
    console.log( "view  : " + mav.view );
    console.log( "model : " + JSON.stringify(mav.model, null, 4) );

    let content_disposition = res._headers[ "content-disposition" ];

    if( content_disposition && content_disposition.indexOf( "filename" ) > -1 ){
      res.download( require("path").join(mav.model.savedPath, mav.model.savedFileName), mav.model.originalFileName );
    } else{
      if( req.xhr || req.headers.accept.indexOf("json") > -1 ){
        res.send( mav.model );
      } else{
        res.render( mav.view, mav.model );
      }
    }
  } )
  .catch( function(err){
    console.log( err );
    res.render( "error.html" );
  } );
} );


app.post( "/*", (req, res) => {

  contextDispatcher.dispatching( req, res )
  .then( function( mav ){
    console.log( "view  : " + mav.view );
    console.log( "model : " + JSON.stringify(mav.model, null, 4) );

    let content_disposition = res._headers[ "content-disposition" ];

    if( content_disposition && content_disposition.indexOf( "filename" ) > -1 ){
      res.download( require("path").join(mav.model.savedPath, mav.model.savedFileName), mav.model.originalFileName );
    } else{
      if( req.xhr || req.headers.accept.indexOf("json") > -1 ){
        res.send( mav.model );
      } else{
        res.render( mav.view, mav.model );
      }
    }
  } )
  .catch( function(err){
    console.log( err );
    res.render( "error.html" );
  } );
} );
